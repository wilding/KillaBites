//////////////////////////    CONNECTING VAGRANT   ///////////////////////////////////////////////////////////////////////////

➜  KillaBites git:(master) ✗ vagrant status 
      Current machine states: 
       
      default                   not created (vmware_desktop) 
       
      The VMware machine has not yet been created. Run `vagrant up` 
      to create the machine. If a machine is not created, only the 
      default provider will be shown. Therefore, if a provider is not listed, 
      then the machine is not created for that provider. 


➜  KillaBites git:(master) ✗ vagrant up 
      Bringing machine 'default' up with 'vmware_desktop' provider... 
      ==> default: Cloning VMware VM: 'starboard/ubuntu-arm64-20.04.5'. This can take some time... 
      ==> default: Checking if box 'starboard/ubuntu-arm64-20.04.5' version '20221120.20.40.0' is up to date... 
      ==> default: Verifying vmnet devices are healthy... 
      ==> default: Preparing network adapters... 
      WARNING: The VMX file for this box contains a setting that is automatically overwritten by Vagrant 
      WARNING: when started. Vagrant will stop overwriting this setting in an upcoming release which may 
      WARNING: prevent proper networking setup. Below is the detected VMX setting: 
      WARNING:  
      WARNING:   ethernet0.pcislotnumber = "160" 
      WARNING:  
      WARNING: If networking fails to properly configure, it may require this VMX setting. It can be manually 
      WARNING: applied via the Vagrantfile: 
      WARNING:  
      WARNING:   Vagrant.configure(2) do |config| 
      WARNING:     config.vm.provider :vmware_desktop do |vmware| 
      WARNING:       vmware.vmx["ethernet0.pcislotnumber"] = "160" 
      WARNING:     end 
      WARNING:   end 
      WARNING:  
      WARNING: For more information: https://www.vagrantup.com/docs/vmware/boxes.html#vmx-allowlisting 
      ==> default: Starting the VMware VM... 
      ==> default: Waiting for the VM to receive an address... 
      ==> default: Forwarding ports... 
          default: -- 8080 => 8080 
          default: -- 8000 => 8000 
          default: -- 22 => 2222 
      ==> default: Waiting for machine to boot. This may take a few minutes... 
          default: SSH address: 192.168.137.128:22 
          default: SSH username: vagrant 
          default: SSH auth method: private key 
          default:  
          default: Vagrant insecure key detected. Vagrant will automatically replace 
          default: this with a newly generated keypair for better security. 
          default:  
          default: Inserting generated public key within guest... 
          default: Removing insecure key from the guest if it's present... 
          default: Key inserted! Disconnecting and reconnecting using new SSH key... 
      ==> default: Machine booted and ready! 
      ==> default: Configuring network adapters within the VM... 
      ==> default: Waiting for HGFS to become available... 
      ==> default: Enabling and configuring shared folders... 
          default: -- /Users/wilding/Documents/code/KillaBites: /vagrant 


➜  KillaBites git:(master) ✗ vagrant ssh 
      Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.4.0-132-generic aarch64) 
       
       * Documentation:  https://help.ubuntu.com 
       * Management:     https://landscape.canonical.com 
       * Support:        https://ubuntu.com/advantage 
       
        System information as of Tue 04 Jun 2024 09:19:49 PM UTC 
       
        System load:  0.49               Processes:             250 
        Usage of /:   3.2% of 193.29GB   Users logged in:       0 
        Memory usage: 4%                 IPv4 address for eth0: 192.168.137.128 
        Swap usage:   0% 
       
       * Strictly confined Kubernetes makes edge and IoT secure. Learn how MicroK8s 
         just raised the bar for easy, resilient and secure K8s cluster deployment. 
       
         https://ubuntu.com/engage/secure-kubernetes-at-the-edge 
 



//////////////////////////    INSTALLING PACKAGES   ///////////////////////////////////////////////////////////////////////////


vagrant@dev-m1:~$ sudo apt-get update 
      # output redacted for readability

vagrant@dev-m1:~$ sudo apt-get upgrade 
      # output redacted for readability

vagrant@dev-m1:~$ sudo apt-get install postgresql 
      # output redacted for readability

vagrant@dev-m1:~$ sudo apt-get install python3-psycopg2 
      # output redacted for readability

vagrant@dev-m1:~$ sudo apt-get install python3-flask 
      # output redacted for readability

vagrant@dev-m1:~$ sudo apt-get install python3-sqlalchemy 
      # output redacted for readability

vagrant@dev-m1:~$ sudo apt-get install python3-pip 
      # output redacted for readability

vagrant@dev-m1:~$ sudo apt-get install git 
      # output redacted for readability





vagrant@dev-m1:~$ pip install bleach 
      # output redacted for readability

vagrant@dev-m1:~$ pip install oauth2client 
      # output redacted for readability

vagrant@dev-m1:~$ pip install requests 
      Requirement already satisfied: requests in /usr/lib/python3/dist-packages (2.22.0) 

vagrant@dev-m1:~$ pip install httplib2 
      Requirement already satisfied: httplib2 in /usr/lib/python3/dist-packages (0.14.0) 




//////////////////////////    DATABASE SETUP   ///////////////////////////////////////////////////////////////////////////


vagrant@dev-m1:~$ sudo su postgres 

postgres@dev-m1:/home/vagrant$ psql 
      psql (12.18 (Ubuntu 12.18-0ubuntu0.20.04.1)) 
      Type "help" for help. 
 
postgres=# \conninfo 
      You are connected to database "postgres" as user "postgres" via socket in "/var/run/postgresql" at port "5432". 

postgres=# \du 
                                         List of roles 
       Role name |                         Attributes                         | Member of  
      -----------+------------------------------------------------------------+----------- 
       postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {} 
 
postgres=# CREATE USER vagrant; 
      CREATE ROLE 

postgres=# \du 
                                         List of roles 
       Role name |                         Attributes                         | Member of  
      -----------+------------------------------------------------------------+----------- 
       postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {} 
       vagrant   |                                                            | {} 
       
postgres=# \l 
                                        List of databases 
         Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges    
      -----------+----------+----------+-------------+-------------+----------------------- 
       postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |  
       template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          + 
                 |          |          |             |             | postgres=CTc/postgres 
       template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          + 
                 |          |          |             |             | postgres=CTc/postgres 
      (3 rows) 
       
postgres=# CREATE DATABASE killabites; 
      CREATE DATABASE 

postgres=# \l 
                                        List of databases 
          Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges    
      ------------+----------+----------+-------------+-------------+----------------------- 
       killabites | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |  
       postgres   | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |  
       template0  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          + 
                  |          |          |             |             | postgres=CTc/postgres 
       template1  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          + 
                  |          |          |             |             | postgres=CTc/postgres 
      (4 rows) 
       
postgres=# grant all privileges on database killabites to vagrant; 
      GRANT 

postgres=# \q 

postgres@dev-m1:/home/vagrant$ exit 
      exit





vagrant@dev-m1:~$ psql -U vagrant -d killabites 
      psql (12.18 (Ubuntu 12.18-0ubuntu0.20.04.1)) 
      Type "help" for help. 
 
killabites=> \conninfo 
      You are connected to database "killabites" as user "vagrant" via socket in "/var/run/postgresql" at port "5432". 

killabites=> \dt 
      Did not find any relations. 

killabites=> \q

vagrant@dev-m1:~$ cd /vagrant

vagrant@dev-m1:/vagrant$ ls 
      backups  database_setup.py  database_setup.pyc  __init__.py  load_from_json_backup.py  __pycache__  README.md  static  templates  Vagrantfile  vagrant_provisions.sh 

vagrant@dev-m1:/vagrant$ psql -d killabites 
      psql (12.18 (Ubuntu 12.18-0ubuntu0.20.04.1)) 
      Type "help" for help. 
 
killabites=> \password 
      Enter new password for user "vagrant":  
      Enter it again:  

killabites=> \q 

vagrant@dev-m1:/vagrant$ python3 database_setup.py 

vagrant@dev-m1:/vagrant$ psql -d killabites 
      psql (12.18 (Ubuntu 12.18-0ubuntu0.20.04.1)) 
      Type "help" for help. 
 
killabites=> \dt 
                 List of relations 
       Schema |    Name    | Type  |  Owner   
      --------+------------+-------+--------- 
       public | ingredient | table | vagrant 
       public | recipe     | table | vagrant 
      (2 rows) 
 
killabites=> \q 

vagrant@dev-m1:/vagrant$ python3 load_from_json_backup.py
      # redacted output: adding 'ingredient' to database...
      # redacted output: adding 'recipe' to database...

vagrant@dev-m1:/vagrant$ python3 __init__.py
       * Serving Flask app "__init__" (lazy loading)
       * Environment: production
         WARNING: This is a development server. Do not use it in a production deployment.
         Use a production WSGI server instead.
       * Debug mode: on
       * Running on http://0.0.0.0:8080/ (Press CTRL+C to quit)
       * Restarting with stat
       * Debugger is active!
       * Debugger PIN: 302-166-924

